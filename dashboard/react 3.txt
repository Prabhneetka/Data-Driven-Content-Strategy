import React, { useState } from 'react';
import { LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area } from 'recharts';
import { TrendingUp, TrendingDown, Users, Eye, MousePointer, Mail, Video, FileText, MessageSquare, Target, Calendar, Filter, Download, RefreshCw } from 'lucide-react';

const ContentPerformanceDashboard = () => {
  const [selectedTimeframe, setSelectedTimeframe] = useState('30d');
  const [selectedContentType, setSelectedContentType] = useState('all');

  // Sample data for different content types
  const overallMetrics = {
    totalContent: 145,
    totalViews: 285420,
    totalEngagement: 34650,
    avgConversionRate: 3.2,
    contentROI: 340
  };

  const performanceTrends = [
    { date: '2025-05-01', blog: 8200, email: 5400, social: 3200, video: 2100, support: 12000 },
    { date: '2025-05-05', blog: 9100, email: 5800, social: 3800, video: 2400, support: 13200 },
    { date: '2025-05-10', blog: 8900, email: 6200, social: 4100, video: 2800, support: 14100 },
    { date: '2025-05-15', blog: 10200, email: 6800, social: 4500, video: 3200, support: 15300 },
    { date: '2025-05-20', blog: 11500, email: 7200, social: 4900, video: 3600, support: 16800 },
    { date: '2025-05-25', blog: 12100, email: 7800, social: 5200, video: 4100, support: 18200 },
    { date: '2025-05-30', blog: 13200, email: 8400, social: 5800, video: 4500, support: 19500 }
  ];

  const contentTypeData = [
    { type: 'Blog Posts', count: 45, views: 132000, engagement: 12500, conversion: 2.8, roi: 320 },
    { type: 'Email Campaigns', count: 28, views: 84000, engagement: 8200, conversion: 3.1, roi: 425 },
    { type: 'Social Media', count: 62, views: 95000, engagement: 11200, conversion: 1.9, roi: 180 },
    { type: 'Video Content', count: 18, views: 67000, engagement: 7800, conversion: 4.2, roi: 520 },
    { type: 'Support Docs', count: 32, views: 156000, engagement: 4500, conversion: 0, roi: 0 }
  ];

  const userJourneyData = [
    { stage: 'Awareness', visitors: 10000, conversion: 12, content: 'Blog Posts' },
    { stage: 'Consideration', visitors: 1200, conversion: 8, content: 'Guides' },
    { stage: 'Decision', visitors: 96, conversion: 15, content: 'Demos' },
    { stage: 'Retention', visitors: 14, conversion: 85, content: 'Tutorials' }
  ];

  const topPerformingContent = [
    { title: "Complete Guide to Content Analytics", type: "Blog", views: 12500, engagement: 8.2, conversion: 4.1 },
    { title: "Weekly Newsletter - May Week 3", type: "Email", views: 8400, engagement: 28.5, conversion: 3.8 },
    { title: "Content Strategy Masterclass", type: "Video", views: 6700, engagement: 72, conversion: 6.2 },
    { title: "How to Measure Content ROI", type: "Blog", views: 9800, engagement: 6.8, conversion: 3.9 },
    { title: "Social Media Best Practices", type: "Social", views: 5200, engagement: 12.4, conversion: 2.1 }
  ];

  const conversionFunnelData = [
    { stage: 'Content View', count: 100000, rate: 100 },
    { stage: 'Engagement', count: 35000, rate: 35 },
    { stage: 'Lead Capture', count: 8750, rate: 8.75 },
    { stage: 'Qualified Lead', count: 2625, rate: 2.63 },
    { stage: 'Customer', count: 525, rate: 0.53 }
  ];

  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'];

  const MetricCard = ({ title, value, change, icon: Icon, trend = 'up' }) => (
    <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <p className="text-2xl font-bold text-gray-900 mt-1">{value}</p>
          {change && (
            <div className={`flex items-center mt-2 text-sm ${
              trend === 'up' ? 'text-green-600' : 'text-red-600'
            }`}>
              {trend === 'up' ? <TrendingUp className="w-4 h-4 mr-1" /> : <TrendingDown className="w-4 h-4 mr-1" />}
              {change}
            </div>
          )}
        </div>
        <div className={`p-3 rounded-full ${
          trend === 'up' ? 'bg-green-100 text-green-600' : 'bg-blue-100 text-blue-600'
        }`}>
          <Icon className="w-6 h-6" />
        </div>
      </div>
    </div>
  );

  const ContentTypeCard = ({ data }) => (
    <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
      <div className="flex justify-between items-start mb-4">
        <h3 className="text-lg font-semibold text-gray-900">{data.type}</h3>
        <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">
          {data.count} pieces
        </span>
      </div>
      
      <div className="space-y-3">
        <div className="flex justify-between">
          <span className="text-sm text-gray-600">Total Views</span>
          <span className="text-sm font-medium">{data.views.toLocaleString()}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-sm text-gray-600">Engagement</span>
          <span className="text-sm font-medium">{data.engagement.toLocaleString()}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-sm text-gray-600">Conversion Rate</span>
          <span className="text-sm font-medium">{data.conversion}%</span>
        </div>
        {data.roi > 0 && (
          <div className="flex justify-between">
            <span className="text-sm text-gray-600">ROI</span>
            <span className="text-sm font-medium text-green-600">{data.roi}%</span>
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Content Performance Dashboard</h1>
              <p className="text-gray-600 mt-2">Data-driven insights for content strategy optimization</p>
            </div>
            <div className="flex items-center gap-3">
              <select 
                value={selectedTimeframe}
                onChange={(e) => setSelectedTimeframe(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="7d">Last 7 days</option>
                <option value="30d">Last 30 days</option>
                <option value="90d">Last 90 days</option>
                <option value="1y">Last year</option>
              </select>
              <button className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                <RefreshCw className="w-4 h-4 mr-2" />
                Refresh Data
              </button>
            </div>
          </div>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
          <MetricCard
            title="Total Content Pieces"
            value={overallMetrics.totalContent}
            change="+12 this month"
            icon={FileText}
            trend="up"
          />
          <MetricCard
            title="Total Views"
            value={overallMetrics.totalViews.toLocaleString()}
            change="+18.5%"
            icon={Eye}
            trend="up"
          />
          <MetricCard
            title="Total Engagement"
            value={overallMetrics.totalEngagement.toLocaleString()}
            change="+24.2%"
            icon={MessageSquare}
            trend="up"
          />
          <MetricCard
            title="Avg Conversion Rate"
            value={`${overallMetrics.avgConversionRate}%`}
            change="+0.4%"
            icon={Target}
            trend="up"
          />
          <MetricCard
            title="Content ROI"
            value={`${overallMetrics.contentROI}%`}
            change="+45%"
            icon={TrendingUp}
            trend="up"
          />
        </div>

        {/* Performance Trends Chart */}
        <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200 mb-8">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Content Performance Trends</h3>
          <ResponsiveContainer width="100%" height={300}>
            <AreaChart data={performanceTrends}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Area type="monotone" dataKey="blog" stackId="1" stroke="#3B82F6" fill="#3B82F6" fillOpacity={0.6} />
              <Area type="monotone" dataKey="email" stackId="1" stroke="#10B981" fill="#10B981" fillOpacity={0.6} />
              <Area type="monotone" dataKey="social" stackId="1" stroke="#F59E0B" fill="#F59E0B" fillOpacity={0.6} />
              <Area type="monotone" dataKey="video" stackId="1" stroke="#EF4444" fill="#EF4444" fillOpacity={0.6} />
              <Area type="monotone" dataKey="support" stackId="1" stroke="#8B5CF6" fill="#8B5CF6" fillOpacity={0.6} />
            </AreaChart>
          </ResponsiveContainer>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Content Type Performance */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Performance by Content Type</h3>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={contentTypeData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="type" angle={-45} textAnchor="end" height={80} />
                <YAxis />
                <Tooltip />
                <Bar dataKey="views" fill="#3B82F6" name="Views" />
                <Bar dataKey="engagement" fill="#10B981" name="Engagement" />
              </BarChart>
            </ResponsiveContainer>
          </div>

          {/* User Journey Funnel */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Content User Journey</h3>
            <div className="space-y-4">
              {userJourneyData.map((stage, index) => (
                <div key={stage.stage} className="relative">
                  <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium mr-3 ${
                        index === 0 ? 'bg-blue-500' : 
                        index === 1 ? 'bg-green-500' : 
                        index === 2 ? 'bg-yellow-500' : 'bg-purple-500'
                      }`}>
                        {index + 1}
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">{stage.stage}</p>
                        <p className="text-sm text-gray-600">{stage.content}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-lg font-semibold text-gray-900">{stage.visitors.toLocaleString()}</p>
                      <p className="text-sm text-gray-600">{stage.conversion}% conversion</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Content Type Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-6 mb-8">
          {contentTypeData.map((contentType, index) => (
            <ContentTypeCard key={contentType.type} data={contentType} />
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Top Performing Content */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Top Performing Content</h3>
            <div className="space-y-4">
              {topPerformingContent.map((content, index) => (
                <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">{content.title}</h4>
                    <div className="flex items-center gap-4 mt-1">
                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                        content.type === 'Blog' ? 'bg-blue-100 text-blue-800' :
                        content.type === 'Email' ? 'bg-green-100 text-green-800' :
                        content.type === 'Video' ? 'bg-red-100 text-red-800' :
                        'bg-purple-100 text-purple-800'
                      }`}>
                        {content.type}
                      </span>
                      <span className="text-sm text-gray-600">{content.views.toLocaleString()} views</span>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-sm font-medium text-gray-900">{content.engagement}% engagement</p>
                    <p className="text-sm text-green-600">{content.conversion}% conversion</p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Conversion Funnel */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Content Conversion Funnel</h3>
            <div className="space-y-3">
              {conversionFunnelData.map((stage, index) => (
                <div key={stage.stage} className="relative">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-gray-900">{stage.stage}</span>
                    <span className="text-sm text-gray-600">{stage.rate}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-3">
                    <div 
                      className="bg-blue-600 h-3 rounded-full transition-all duration-300"
                      style={{ width: `${Math.max(stage.rate, 2)}%` }}
                    ></div>
                  </div>
                  <div className="text-right mt-1">
                    <span className="text-xs text-gray-500">{stage.count.toLocaleString()} users</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Insights and Recommendations */}
        <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">AI-Powered Insights & Recommendations</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="p-4 bg-green-50 rounded-lg">
              <h4 className="font-medium text-green-900 mb-2">🚀 Top Opportunity</h4>
              <p className="text-sm text-green-800">Video content shows 520% ROI but only 18 pieces created. Scaling video production could increase overall performance by 35%.</p>
            </div>
            <div className="p-4 bg-blue-50 rounded-lg">
              <h4 className="font-medium text-blue-900 mb-2">📊 Performance Alert</h4>
              <p className="text-sm text-blue-800">Social media engagement dropped 12% this week. Consider A/B testing posting times and content formats to improve performance.</p>
            </div>
            <div className="p-4 bg-yellow-50 rounded-lg">
              <h4 className="font-medium text-yellow-900 mb-2">💡 Strategic Insight</h4>
              <p className="text-sm text-yellow-800">Blog posts in the "Complete Guide" format show 3x higher conversion rates. Focus on comprehensive, long-form content.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContentPerformanceDashboard;